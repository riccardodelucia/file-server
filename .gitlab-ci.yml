stages:
  - setup
  - lint
  - build
  - test
  - deploy


variables:
  IMAGE_NAME: fileserver
  BUILD: $CI_COMMIT_SHORT_SHA


set version:
  stage: setup
  variables:
    VERSION: latest
  script:
    - echo $VERSION
    - echo "VERSION=$VERSION" >> version.env
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
    - when: always
  artifacts:
    reports:
      dotenv: version.env


lint hadolint:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint Dockerfile


lint javascript:
  stage: lint
  image: node
  script:
    - npm install -g eslint
    - eslint --init
    - eslint src


build image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat $CI_SERVER_TLS_CA_FILE >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --build-arg ARG_BUILD=$BUILD --build-arg ARG_VERSION=$VERSION --context $CI_PROJECT_DIR --destination $CI_REGISTRY_IMAGE/$IMAGE_NAME:$VERSION --destination $CI_REGISTRY_IMAGE/$IMAGE_NAME:$BUILD --target=prod --skip-unused-stages=true
  rules:
    - if: $CI_REF_NAME == $CI_DEFAULT_BRANCH
      when: always


test image:
  stage: test
  image: curlimages/curl
  services:
    - name: "$CI_REGISTRY_IMAGE/$IMAGE_NAME:$VERSION"
      alias: server
  script:
    - curl http://server:8080 | grep $BUILD
  rules:
    - if: $CI_REF_NAME == $CI_DEFAULT_BRANCH
      when: always


.deploy to environment:
  stage: deploy
  image: ubuntu
  before_script:
      - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - ssh-keyscan $VM_NAME >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      - apt-get update -y
      - apt-get install -y gettext
  script:
    - echo $VERSION
    - envsubst < templates/$ENV_FILE > .env
    - envsubst < templates/deploy.sh > deploy.sh
    - envsubst < templates/docker-compose.deploy.yml > docker-compose.deploy.yml
    - ssh -l $VM_USER -o StrictHostKeyChecking=no $VM_NAME "mkdir -p $VM_TARGET_DIR"
    - scp deploy.sh $VM_USER@$VM_NAME:$VM_TARGET_DIR/deploy.sh
    - scp docker-compose.deploy.yml $VM_USER@$VM_NAME:$VM_TARGET_DIR/docker-compose.yml
    - scp .env $VM_USER@$VM_NAME:$VM_TARGET_DIR/.env
    - ssh -l $VM_USER -o StrictHostKeyChecking=no $VM_NAME 'bash -s' < deploy.sh


deploy to staging:
  environment: staging
  extends: .deploy to environment
  variables:
    ENV_FILE: staging.env
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"

