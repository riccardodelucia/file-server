stages:
  - setup
  - lint
  - build
  - test
  - tag
  - deploy

variables:
  BUILD: $CI_COMMIT_SHORT_SHA

####################################################################################################
# merge request pipeline: run this job only when a merge request is opened to save pipeline runs
.lint:
  stage: lint
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH

lint hadolint:
  extends: .lint
  image: hadolint/hadolint:latest-debian
  script:
    - echo $CI_REGISTRY_IMAGE
    - hadolint Dockerfile

lint javascript:
  extends: .lint
  image: node
  script:
    - npm install eslint eslint-config-prettier
    - node_modules/eslint/bin/eslint.js .

####################################################################################################
# branch pipeline: build and test image on the master branch
build image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat $CI_SERVER_TLS_CA_FILE >> /kaniko/ssl/certs/ca-certificates.crt
    - /kaniko/executor --build-arg ARG_BUILD=$BUILD --context $CI_PROJECT_DIR --destination $CI_REGISTRY_IMAGE:$BUILD --destination $CI_REGISTRY_IMAGE:latest --target=prod --skip-unused-stages=true
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH # excludes execution when tagging the commit
      when: always
    - when: never

test image:
  stage: test
  image: curlimages/curl
  services:
    - name: "$CI_REGISTRY_IMAGE:$BUILD"
      alias: server
  script:
    - curl http://server:8080 | grep $BUILD
  rules:
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH # excludes execution when tagging the commit
      when: always
    - when: never

####################################################################################################
# tag pipeline: tag image with git tag
tag image:
  stage: tag
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane tag $CI_REGISTRY_IMAGE:$BUILD $CI_COMMIT_REF_NAME
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: never

####################################################################################################
# branch pipeline: deploy to environment
.deploy to environment:
  stage: deploy
  image: ubuntu
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $VM_NAME >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - apt-get update -y
    - apt-get install -y gettext
  script:
    - echo $VM_NAME
    - echo $CI_COMMIT_BRANCH
    - echo $CI_ENVIRONMENT_NAME
    - envsubst < templates/deploy.env > .env
    - envsubst < templates/deploy.sh > deploy.sh
    - envsubst < templates/docker-compose.deploy.yml > docker-compose.deploy.yml
    - ssh -l $VM_USER -o StrictHostKeyChecking=no $VM_NAME "mkdir -p $VM_TARGET_DIR"
    - scp deploy.sh $VM_USER@$VM_NAME:$VM_TARGET_DIR/deploy.sh
    - scp docker-compose.deploy.yml $VM_USER@$VM_NAME:$VM_TARGET_DIR/docker-compose.yml
    - scp .env $VM_USER@$VM_NAME:$VM_TARGET_DIR/.env
    - ssh -l $VM_USER -o StrictHostKeyChecking=no $VM_NAME 'bash -s' < deploy.sh

deploy to staging:
  environment: staging
  extends: .deploy to environment
  variables:
    TAG: $BUILD
  only:
    - staging
